// We want to find a larger number, but not too large - just the next larger one =>
// We want to avoid chaning the number in the left - it will increase the number too much =>
// Example: 4325413 -> we can only change the last two numbers and have 432531
// What if it was 432531 in the first place? 31 cannot be increased.
// Lets try 531 - still no
// 2531 - this can be incrased - the smallest number that can be used to incrase the 2 is 3. so for now we have 3521.
// Next we want to minimize 3521 - thats easier - just sort the numbers to the right of 3 - 3125. So the unswer is 4323125


class Solution {
    public void nextPermutation(int[] nums) {
        int i= nums.length-2;
        while(i>=0 && nums[i] >= nums[i+1])
        i--;

        
        if(i>=0)
        {
            int j = nums.length-1;
            while(j>=0 && nums[j] <= nums[i])
            j--;
            swap(nums,i,j);
        }
        reverse(nums,i+1);
        
    }
    public void swap(int[] nums,int i,int j)
    {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
    public void reverse(int[] nums,int i)
    {
        int end = nums.length-1;
        while(i <= end)
        {
            swap(nums,i,end);
            i++;
            end--;
        }
    }
}
